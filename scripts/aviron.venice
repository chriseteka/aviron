;; -----------------------------------------------------------------------------
;; Aviron shell
;; -----------------------------------------------------------------------------
;; This Aviron shell is started by a launcher script:
;;   aviron.sh     MacOSX & Linux
;;   aviron.bat    Windows
;;
;; On MacOSX / Linux the launcher script looks like:
;;
;; cd /Users/juerg/Desktop/scripts/
;; 
;; ${JAVA_8_HOME}/bin/java \
;;   -server \
;;   -cp "lib:libs/*" com.github.jlangch.venice.Launcher \
;;   -Xmx2G \
;;   -XX:-OmitStackTraceInFastThrow \
;;   -Dvenice.repl.home=${VENICE_REPL_HOME} \
;;   -colors \
;;   -macroexpand \
;;   -app-repl aviron.venice
;; -----------------------------------------------------------------------------

(load-module :gradlew)
(load-module :ansi)
(load-module :java)

(import :com.github.jlangch.venice.EofException)


;; see https://www.ascii-art-generator.org/ with font "standard"
(defonce logo 
         """

                         _                 
               /\\       (_)                
              /  \\__   ___ _ __ ___  _ __  
             / /\\ \\ \\ / / | '__/ _ \\| '_ \\ 
            / ____ \\ V /| | | | (_) | | | |
           /_/    \\_\\_/ |_|_|  \\___/|_| |_|
                           
         """ )

(defonce COLOR_THEMES {
  :light { :logo     "[38;5;33m"
           :status   "[38;5;64m"
           :result   "[38;5;20m"
           :stdout   "[38;5;243m"
           :stderr   "[38;5;208m"
           :debug    "[38;5;29m"
           :warning  "[38;5;208m"
           :error    "[38;5;196m" }

  :dark  { :logo     "[38;5;33m"
           :status   "[38;5;64m"
           :result   "[38;5;20m"
           :stdout   "[38;5;243m"
           :stderr   "[38;5;208m"
           :debug    "[38;5;29m"
           :warning  "[38;5;208m"
           :error    "[38;5;196m" } } )



;; -----------------------------------------------------------------------------
;; Configuration                                                               -
;; -----------------------------------------------------------------------------

(defonce proj-name "aviron")  ;; Aviron Git/Eclipse project name

(defonce proj-home (str/strip-end (system-env :AVIRON_PROJECT_HOME) "/"))

;; Java 8 is mandatory for "./gradlew eclipse", the Eclipse Venice project must
;; be based on Java 8!
(defonce java-8-home (str/strip-end (system-env :JAVA_8_HOME) "/"))
(defonce java-17-home (str/strip-end (system-env :JAVA_17_HOME) "/"))
(defonce java-home java-8-home)

(defonce cmd-line-prompt (str "avshell> "))

(defonce gradle-std-options ["--warning-mode=all" 
                             "--console=plain" 
                             "--stacktrace"
                             ;; "--info"
                             ;; "--debug"
                             "-Dorg.gradle.java.home=\"~{java-home}\""])

(defonce display-status-bar? false)



;; -----------------------------------------------------------------------------
;; Commands                                                                    -
;; -----------------------------------------------------------------------------

(defn exit []
  (printlnc :error "Terminating shell...")
  (sleep 600)
  (throw (ex :EofException "exit")))

(defn publish [sonatype-user sonatype-pwd]
  (assert (some? sonatype-user) "Please provide the Sonatype user!")
  (assert (some? sonatype-pwd) "Please provide the Sonatype password!")
  (gradle-tasks "sonatypePublish"
                "-PsonatypeUsername=\"~{sonatype-user}\""
                "-PsonatypePassword=\"~{sonatype-pwd}\""
                "-PsonatypePublishType=\"AUTO\""))

(defn gradle-tasks [& args]
  (apply gradlew/run* proj-home 
                      (partial printlnc :stdout)  
                      (partial printlnc :stderr)
                      (concat gradle-std-options args)))


;; -----------------------------------------------------------------------------
;; Util                                                                        -
;; -----------------------------------------------------------------------------

(defn fatal-error-and-exit [msg]
  (println)
  (printlnc :error msg)
  (println)
  (printlnc :error "<Press any key to exit>")
  (println)
  (repl/wait-any-key-pressed)
  (throw (ex :EofException "exit")))

(defn invalid-cmd [msg]
  (printlnc :warning msg))

(defn display-welcome-msg []
  (docoll #(printlnc-bold :logo %) (str/split-lines logo)))

(defn printlnc [color-code text]
  (println (ansi/style (str text) (ansi-color color-code))))

(defn printlnc-bold [color-code text]
  (println (ansi/style (str text) :bold (ansi-color color-code))))

(defn ansi-color [code]
  (code ((repl/color-theme) COLOR_THEMES (:light COLOR_THEMES)) :stdout))

(defn help []
  (println
    """
    ----------------------------------------------------------------------------
    Help
    ----------------------------------------------------------------------------
    b|build          build the Aviron project
    T|tests          run the Venice unit tests
    t|task t1 tN     run one or more Venice project Gradle tasks
    B|bundle         bundle artefacts for publishing to Central Sonatype
    p|publish u p    publish artefacts, requires Sonatype user and password
    i|info           display the configuration
    h|!|help         display the help
    q|quit           quit the shell
    x|exit           quit the shell

    """))

(defn display-info []
  (println
    """
    Configuration:
       Gradle:           ~(gradlew/version proj-home)
       Java version:     ~(java-version)
       User home:        ~(io/user-home-dir)
       Working dir:      ~(io/user-dir)
       Project home:     ~{proj-home}
       Terminal:         [~(repl/term-cols) x ~(repl/term-rows)]

    """))

(defn display-status-bar []
  (when display-status-bar?
    (let [cols  (repl/term-cols)
          left  (str/format "%s" (version))
          right ""
          delim (str/repeat "-" (- cols 8 (count left) (count right)))]
      (printlnc :status "-- ~{left} ~{delim} ~{right} --"))))

(defn run-command [cmd & args]
  (cond
    (nil? cmd)                    nil
    (match? cmd "b|build")        (gradle-tasks "clean" "jar")
    (match? cmd "T|tests")        (gradle-tasks "clean" "test")
    (match? cmd "B|bundle")       (gradle-tasks "sonatypeBundle")
    (match? cmd "p|publish")      (publish (first args) (second args))
    (match? cmd "t|task")         (apply gradle-tasks args)
    (match? cmd "i|info")         (display-info)
    (match? cmd "h|!|help")       (help)
    (match? cmd "x|exit")         (exit)
    (match? cmd "q|quit")         (exit)
    :else                         (printlnc :warning "Invalid command: ~{cmd}")))

(defn split-command [cmd]
  (let [c (str/trim-to-nil cmd)]
    (if (some? c)
      (->> (regex/matcher "([^\"]\\S*|\".+?\")\\s*" c)
           (regex/find-all)
           (map str/trim-to-nil)
           (filter some?)
           (map str/double-unquote))
      [nil])))

(defn handle-command [cmd]
  (try
    (apply run-command (split-command cmd))
    (display-status-bar)
    (catch :EofException ex 
      (throw ex))
    (catch :VncException ex 
      (printlnc :error (ex-venice-stacktrace ex)))
    (catch :java.lang.Exception ex 
      (printlnc :error (str "Error: " (:message ex))))))


;; -----------------------------------------------------------------------------
;; MAIN                                                                        -
;; -----------------------------------------------------------------------------

(when-not (io/exists-dir? proj-home)
  (fatal-error-and-exit "The Aviron project dir '~{proj-home}' does not exist!"))

(when-not (io/exists-dir? java-home)
  (fatal-error-and-exit "The JAVA home '~{java-home}' does not exist!"))

;; configure the REPL
(repl/prompt! cmd-line-prompt)
(repl/handler! handle-command)

(display-welcome-msg)
(display-status-bar)