/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

def group = 'com.github.jlangch'

def version_regex = '[0-9]+[.][0-9]+[.][0-9]+(-SNAPSHOT)?'

def sonatypeUsername = project.properties['sonatypeUsername'] ?: "unknown"
def sonatypePassword = project.properties['sonatypePassword'] ?: "unknown"


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-parameters' ]

    doLast {
        println "Java: ${JavaVersion.current()}"
    }
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs += [ '-parameters' ]
}

javadoc.options.encoding = 'UTF-8'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    exclude "com/github/jlangch/aviron/commands/**"
    exclude "com/github/jlangch/aviron/server/**"
    source = sourceSets.main.allJava
}

jar {
    archiveFileName = "aviron-${project.version}.jar"
}


publishing {
    publications {
        avironPublication(MavenPublication) {
            groupId = 'com.github.jlangch'
            artifactId = 'aviron'
            version = "${project.version}"

            artifact sourcesJar
            artifact javadocJar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Aviron'
                description = 'ClamAV scanner.'
                url = 'https://github.com/jlangch/aviron/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jlangch'
                        name = 'Juerg Lang'
                        email = 'juerg.ch@ggaweb.ch'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:jlangch/aviron.git'
                    developerConnection = 'scm:git:git@github.com:jlangch/aviron.git'
                    url = 'http://github.com:jlangch/aviron/tree/master'
                    tag = 'HEAD'
                }
            }
        }
    }

    repositories {
        if(!version.endsWith('SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"

                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}


signing {
    useGpgCmd()  // use the local GPG agent to sign the artefacts

    sign publishing.publications.avironPublication
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
