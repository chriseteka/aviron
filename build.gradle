/*                 _                 
 *       /\       (_)            
 *      /  \__   ___ _ __ ___  _ __  
 *     / /\ \ \ / / | '__/ _ \| '_ \ 
 *    / ____ \ V /| | | | (_) | | | |
 *   /_/    \_\_/ |_|_|  \___/|_| |_|
 *
 *
 * Copyright 2025 Aviron
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// -----------------------------------------------------------------------------
// Gradle build
// -----------------------------------------------------------------------------
//
// Aviron uses Gradle 8.9
//
// Build commands
//
//   - Build the Aviron jar
//     $> ./gradlew clean jar
//
// -----------------------------------------------------------------------------
// Release Venice:
//
//   [1] Prepare Aviron
//       - Verify that all unit tests pass: ./gradlew clean test
//       - Change version in 'gradle.properties' to '1.x.y' (remove the
//         SNAPSHOT suffix)
//       - Update the ChangeLog for the release version
//       - Update the 'README.md'
//       - Commit the 'README.md' change
//       - Patch the release version number in:
//           {proj}/doc/maven-central.svg
//           {proj}/README.md    (chapter Getting the latest release)
//
//   [2] Publish to Maven
//       - ./gradlew bundle
//       - Open https://central.sonatype.com/publishing and login
//       - Choose deployment name: "com.github.jlangch:aviron:x.y.z"
//       - Upload 'bundle.jar' (scroll down publish dialog)
//       - Publish the artifact
//
//   [3] Draft a GitHub Venice release
//       - Draft a new release in Git (https://github.com/jlangch/aviron/releases)
//         This will create the release tag
//         => don't miss to set "latest flag"!
//       - Pull the changes (commit tag)
//
//   [4] Open new development cycle
//       - Change version in 'gradle.properties' to '1.x.y-SNAPSHOT'
//       - Add an empty ChangeLog entry for the new version
//       - Commit with message "opened new dev cycle"
//
// -----------------------------------------------------------------------------
// Gradle wrapper
//
//    Upgrade Gradle wrapper:
//      See https://docs.gradle.org/current/userguide/gradle_wrapper.html
//      Upgrade:
//         $> ./gradlew wrapper --gradle-version=8.9 --distribution-type=bin
//
//    Get initial Gradle wrapper
//      See https://guides.gradle.org/creating-new-gradle-builds/
//
//    Create and init a gradle project:
//       $> mkdir test
//       $> cd test
//       $> ./gradlew init
//
// -----------------------------------------------------------------------------

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

def group = 'com.github.jlangch'

def version_regex = '[0-9]+[.][0-9]+[.][0-9]+(-SNAPSHOT)?'

def sonatypeUsername = project.properties['sonatypeUsername'] ?: "unknown"
def sonatypePassword = project.properties['sonatypePassword'] ?: "unknown"


compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs = [ '-parameters' ]

    doLast {
        println "Java: ${JavaVersion.current()}"
    }
}

compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
    options.compilerArgs += [ '-parameters' ]
}

javadoc.options.encoding = 'UTF-8'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    exclude "com/github/jlangch/aviron/commands/**"
    exclude "com/github/jlangch/aviron/server/**"
    source = sourceSets.main.allJava
}

jar {
    manifest {
        attributes 'Build-Date':             new Date().format("yyyy-MM-dd'T'HH:mm:ss"),
                   'Implementation-Vendor':  'com.github.jlangch',
                   'Implementation-Title':   'Aviron',
                   'Implementation-Version': "${project.version}",
                   'Specification-Vendor':   'com.github.jlangch',
                   'Application-Name':       'Aviron'
    }

    archiveFileName = "aviron-${project.version}.jar"
}

publishing {
    publications {
        avironPublication(MavenPublication) {
            groupId = 'com.github.jlangch'
            artifactId = 'aviron'
            version = "${project.version}"

            artifact sourcesJar
            artifact javadocJar
            artifact jar

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Aviron'
                description = 'ClamAV scanner.'
                url = 'https://github.com/jlangch/aviron/'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jlangch'
                        name = 'Juerg Lang'
                        email = 'juerg.ch@ggaweb.ch'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:jlangch/aviron.git'
                    developerConnection = 'scm:git:git@github.com:jlangch/aviron.git'
                    url = 'http://github.com:jlangch/aviron/tree/master'
                    tag = 'HEAD'
                }
            }
        }
    }

    repositories {
        if(!version.endsWith('SNAPSHOT')) {
            maven {
                url "https://oss.sonatype.org/service/local/staging/deploy/maven2"

                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }
}


signing {
    useGpgCmd()  // use the local GPG agent to sign the artefacts

    sign publishing.publications.avironPublication
}

task bundle(type: Exec, dependsOn: [clean, shadowJar, sourcesJar, javadocJar]) {
    // Tech info:         https://central.sonatype.org/publish/publish-portal-upload/
    //                    https://central.sonatype.org/publish/publish-portal-api/
    // Manual publish:    https://central.sonatype.com/publishing
    //                    deployment name "com.github.jlangch:aviron:x.y.z"
    //                    scroll down to upload 'bundle.jar'
    // Browse artifacts:  https://central.sonatype.com/search?namespace=com.github.jlangch
    
    workingDir 'build/libs'

    commandLine "/bin/sh",
                "-c",
                "cat ../../pom-template.xml | sed 's/__VERSION__/${project.version}/g' > ./${project.artifactId}-${project.version}.pom" +
                  "; echo 'Bundling ${project.artifactId} ${project.version}' for publishing to Sonatype" +
                  "; echo 'Create ascii armored artifacts...'" +
                  "; gpg -ab ${project.artifactId}-${project.version}.pom" +
                  "; gpg -ab ${project.artifactId}-${project.version}.jar" +
                  "; gpg -ab ${project.artifactId}-${project.version}-sources.jar" +
                  "; gpg -ab ${project.artifactId}-${project.version}-javadoc.jar" +
                  "; echo 'Computing SHA1 and MD5 checksums ...'" +
                  "; sha1sum ${project.artifactId}-${project.version}.pom         | cut -d' ' -f1 > ${project.artifactId}-${project.version}.pom.sha1" +
                  "; sha1sum ${project.artifactId}-${project.version}.jar         | cut -d' ' -f1 > ${project.artifactId}-${project.version}.jar.sha1" +
                  "; sha1sum ${project.artifactId}-${project.version}-sources.jar | cut -d' ' -f1 > ${project.artifactId}-${project.version}-sources.jar.sha1" +
                  "; sha1sum ${project.artifactId}-${project.version}-javadoc.jar | cut -d' ' -f1 > ${project.artifactId}-${project.version}-javadoc.jar.sha1" +
                  "; md5sum ${project.artifactId}-${project.version}.pom          | cut -d' ' -f1 > ${project.artifactId}-${project.version}.pom.md5" +
                  "; md5sum ${project.artifactId}-${project.version}.jar          | cut -d' ' -f1 > ${project.artifactId}-${project.version}.jar.md5" +
                  "; md5sum ${project.artifactId}-${project.version}-sources.jar  | cut -d' ' -f1 > ${project.artifactId}-${project.version}-sources.jar.md5" +
                  "; md5sum ${project.artifactId}-${project.version}-javadoc.jar  | cut -d' ' -f1 > ${project.artifactId}-${project.version}-javadoc.jar.md5" +
                  "; echo 'Bundling artifacts to JAR...'" +
                  "; mkdir -p staging/com/github/jlangch/${project.artifactId}/${project.version}" +
                  "; cp venice-*.* staging/com/github/jlangch/${project.artifactId}/${project.version}" +
                  "; (cd staging; jar -cMf ../bundle.jar *)" +
                  //"; jar -tvf bundle.jar" +
                  "; echo 'Bundling done.'" +
                  "; echo " +
                  "; echo 'Publish manually at : https://central.sonatype.com/publishing'" +
                  "; echo 'with deployment name: ${project.groupId}:${project.artifactId}:${project.version}'"
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.10.2')
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
